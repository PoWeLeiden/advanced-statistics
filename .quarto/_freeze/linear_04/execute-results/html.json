{
  "hash": "ce3d5cd5f97f2d73b655643237679231",
  "result": {
    "engine": "knitr",
    "markdown": "# Meervoudige Lineaire Regressie {#sec-multiple-linear-regression}\n\n\n\n::: {.cell}\n\n:::\n\n\n\nIn dit hoofdstuk ligt de focus op multiple (meervoudige) lineaire regressie, waarbij meerdere onafhankelijke variabelen gebruikt worden. We bespreken ook hoe *gestandaardiseerde* regressiecoëfficiënten te verkrijgen.\n\nWe beginnen weer met het laden van relevante R packages. Deze packages zijn reeds geïnstalleerd op de universitaire computers, maar moeten eerst geladen worden. We laden ook onze dataset.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Packages\nlibrary(rio)             #laden van data\nlibrary(tidyverse)       #data manipulatie en grafieken\nlibrary(broom)           #samenvattingen regressiemodellen\nlibrary(parameters)      #berekenen gestandaardiseerde coëfficiënten\n\n##Import data\ndemdata <- import(\"demdata.rds\") |> \n  as_tibble()\n```\n:::\n\n\n\n## Uitvoeren van de meervoudige lineaire regressie {#sec-performing-a-multiple-linear-regression}\n\nIn dit voorbeeld voorspellen we het niveau van electorale democratie in een land (v2x_polyarchy) aan de hand van 3 onafhankelijke variabelen (2 continue en 1 binair):\n\n-   cpi: CPI staat voor \"corruption perception index\" en meet de mate van corruptie in de publieke sector van een land. Hogere waarden staan voor minder corruptie.\n-   v2caviol: De variabele meet de mate van politiek geweld uitgevoerd door niet-statelijke actoren. Hogere waarden betekenen meer geweld.\n-   TYPEDEMO1984: Binaire variabele die meet of een land in 1984 een democratie of autocratie was.\n\nVoor we de regressie kunnen uitvoeren, moeten we eerst de binaire variabele transformeren naar een factor:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#omzetten naar factor variabele\ndemdata <- demdata |> \n  mutate(TYPEDEMO1984_factor = factorize(TYPEDEMO1984))\n```\n:::\n\n\n\nVoor meervoudige regressie gebruiken we ook de `lm()` functie. We kunnen meerdere onafhankelijke variabelen toevoegen met een '+' teken:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Model schatten en opslaan in data-object \nmodel_multiple <- lm(v2x_polyarchy ~ cpi + v2caviol + TYPEDEMO1984_factor, \n                     data=demdata)\n```\n:::\n\n\n\n`multiple <-`\n\n:   We slaan de resultaten op in een data object dat we 'multiple' noemen. Deze naam kun je zelf bepalen.\n\n`lm(v2x_polyarchy ~)`\n\n:   We voeren een lineaire regressie uit met de afhankelijke variabele \"v2x_polyarchy\". Deze plaatsen we links van de tilde (~).\n\n`cpi + v2caviol + TYPEDEMO1984,`\n\n:   De onafhankelijke variabelen worden rechts van de tilde toegevoegd, van elkaar gescheiden door een '+' teken. De volgorde maakt geen verschil voor de resultaten (wel de volgorde van de coëfficiënten in de output).\n\n`data = demdata)`\n\n:   De naam van de dataset komt aan het einde van de syntax.\n\nDe resultaten bekijken we via `summary()`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(model_multiple)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = v2x_polyarchy ~ cpi + v2caviol + TYPEDEMO1984_factor, \n    data = demdata)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-0.56402 -0.09376  0.01442  0.12926  0.34206 \n\nCoefficients:\n                                Estimate Std. Error t value Pr(>|t|)    \n(Intercept)                     0.187394   0.042634   4.395 2.19e-05 ***\ncpi                             0.006365   0.001059   6.012 1.55e-08 ***\nv2caviol                       -0.008724   0.012258  -0.712    0.478    \nTYPEDEMO1984_factorDemocracies  0.152698   0.034915   4.373 2.39e-05 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.1807 on 138 degrees of freedom\n  (37 observations deleted due to missingness)\nMultiple R-squared:  0.5068,\tAdjusted R-squared:  0.4961 \nF-statistic: 47.26 on 3 and 138 DF,  p-value: < 2.2e-16\n```\n\n\n:::\n:::\n\n\n\n::: callout-warning\n#### Interpretatie\n\nDe interpretatie van de coëfficiënten is gelijkaardig aan die van bivariate modellen, maar we moeten wel de inclusie van meerdere predictoren in rekening brengen.\n\nDe \"(Intercept)\" waarde geeft weer welke waarde we kunnen verwachten voor de afhankelijke variabele als *alle* onafhankelijke variabelen de waarde 0 aannemen. We verwachten op basis van het model dat een land met score 0 op zowel `cpi`, `v2caviol`, als `TYPEDEMO1984` (de referentiecategorie, namelijk een autocratie in 1984) gemiddeld een score op electorale democratie in 2020 van 0.19 zal hebben.\n\nDe coëfficiënten van de onafhankelijke variabelen vertellen ons nog steeds welke verandering we verwachten in de afhankelijke variabele als de predictor met 1 eenheid stijgt. Nu wordt dit effect echter \"gecontroleerd op\" de andere predictoren in het model. Het effect geldt als de andere variabelen constant worden gehouden ('ceteris paribus'). Bijvoorbeeld:\n\n-   **v2caviol**: Op basis van het model verwachten we dat electorale democratiescores dalen met -0.01 eenheden als politiek geweld met 1 eenheid stijgt, met de effecten van regimestatus in 1984 en corruptie constant gehouden.\n-   **TYPEDEMO1984_factor**: Als we landen met dezelfde corruptie en politieke geweldscores vergelijken, verwachten we dat de electorale democratiescore in 2020 0.15 eenheden hoger is voor landen die in 1984 democratieën waren dan landen die autocratieën waren.\n:::\n\n## Gestandaardiseerde coëfficiënten {#sec-standardized-coefficients}\n\nWe kunnen in plaats van de ongestandaardiseerde coëfficiënten ook de gestandaardiseerde coëfficiënten berekenen. We kunnen hiervoor de `standardize_parameters()` functie gebruiken uit het `parameters` package.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmultiple_std <- standardize_parameters(model_multiple, \n                       method = \"refit\")\n```\n:::\n\n\n\nDe syntax lees je zo:\n\n`multiple_std <-`\n\n:   We slaan de resultaten op in een nieuw data object \"multiple_std\".\n\n`standardize_parameters(multiple,`\n\n:   We passen de functie toe op het model tussen haakjes\n\n`method = 'refit')`\n\n:   We gebruiken de `refit` methode, de standaardmethode. Met deze methode worden de afhankelijke en onafhankelijke variabelen gestandaardiseerd en dan wordt het model opnieuw geschat met deze gestandaardiseerde versies.\n\nWe kunnen de resultaten vergelijken:\n\n`standardize_parameters()` creëert een data frame met volgende kolommen:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(multiple_std)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 4\nColumns: 5\n$ Parameter       <chr> \"(Intercept)\", \"cpi\", \"v2caviol\", \"TYPEDEMO1984_factor…\n$ Std_Coefficient <dbl> -0.23661987, 0.49272847, -0.05393177, 0.60000039\n$ CI              <dbl> 0.95, 0.95, 0.95, 0.95\n$ CI_low          <dbl> -0.3957424, 0.3306681, -0.2037814, 0.3287296\n$ CI_high         <dbl> -0.07749731, 0.65478881, 0.09591783, 0.87127121\n```\n\n\n:::\n:::\n\n\n\n::: callout-note\n#### Output uitleg\n\n-   Parameter: Naam van de term of variabele in het model\n-   Std_Coefficient: De waarde van de gestandaardiseerde coëfficiënt voor elke variabele\n-   CI: Niveau van het betrouwbaarheidsinterval voor de gestandaardiseerde coëfficiënt.\n-   CI_low en CI_high: De onder -en bovengrenzen van het betrouwbaarheidsinterval. Deze waarden worden gecombineerd in 1 cel als we de waarden straks printen.\n:::\n\nWe kunnen de resultaten vergelijken met het ongestandaardiseerde model. We gebruiken `tidy()` hier om de output te vereenvoudigen.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Oorspronkelijk model\ntidy(model_multiple)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 5\n  term                           estimate std.error statistic      p.value\n  <chr>                             <dbl>     <dbl>     <dbl>        <dbl>\n1 (Intercept)                     0.187     0.0426      4.40  0.0000219   \n2 cpi                             0.00636   0.00106     6.01  0.0000000155\n3 v2caviol                       -0.00872   0.0123     -0.712 0.478       \n4 TYPEDEMO1984_factorDemocracies  0.153     0.0349      4.37  0.0000239   \n```\n\n\n:::\n\n```{.r .cell-code}\n#gestandaardiseerd model\nmultiple_std\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# Standardization method: refit\n\nParameter                         | Std. Coef. |         95% CI\n---------------------------------------------------------------\n(Intercept)                       |      -0.24 | [-0.40, -0.08]\ncpi                               |       0.49 | [ 0.33,  0.65]\nv2caviol                          |      -0.05 | [-0.20,  0.10]\nTYPEDEMO1984 factor [Democracies] |       0.60 | [ 0.33,  0.87]\n```\n\n\n:::\n:::\n\n\n\nVoor de continue variabelen geven de gestandaardiseerde coëfficiënten weer hoeveel *standaardafwijkingen* de afhankelijke variabele gaat veranderen als de onafhankelijke variabele met *1 standaardafwijking* stijgt.[^linear_04-1]\n\n[^linear_04-1]: We zouden ook kunnen vragen enkel de onafhankelijke variabelen te standaardiseren en de schaal van de afhankelijke variabele te behouden met de optie \"include_response = F\" (F=False). Dit zou ons zeggen hoeveel Y verwacht wordt te veranderen op de originele schaal als de onafhankelijke variabele met 1 standaardafwijking stijgt. We kunnen dit doen als de schaal van de afhankelijke variabele zeer intuïtief is, bijvoorbeeld percentage stemmen voor een bepaalde partij.\n\nVoor factor variabelen ligt de interpretatie anders. De gestandaardiseerde coëfficiënt die we krijgen is de ongestandaardiseerde coëfficiënt gedeeld door de standaardafwijking van de afhankelijke variabele. De gestandaardiseerde coëfficiënten van continue en factor variabelen kunnen niet direct vergeleken worden.[^linear_04-2]\n\n[^linear_04-2]: De gestandaardiseerde coëfficiënten van continue en factor variabelen kunnen meer direct vergeleken worden als we de optie \"two_sd = TRUE\" toevoegen. De coëfficiënt van de continue onafhankelijke variabele geeft dan weer wat er gebeurt met Y als de onafhankelijke met *2 standaardafwijkingen* stijgt, ongeveer het volledige bereik van de onafhankelijke variabele.\n\n::: callout-warning\n#### Interpretatie\n\nWe verwachten dat democratiescores met-0.05 standaardafwijkingen dalen als politiek geweld met 1 standaardafwijking stijgt (en met de effecten van corruptie en regimestatus in het verleden constant gehouden).\n\nAls we landen met dezelfde corruptie en politieke geweldscores vergelijken, verwachten we dat de electorale democratiescore in 2020 0.6 standaardafwijkingen hoger is voor landen die in 1984 democratieën waren dan landen die autocratieën waren.\n:::\n\n::: callout-important\n#### Waarschuwing!\n\nJe zult opgemerkt hebben dat we noch `summary()` noch `tidy()` gebruikt hebben om de gestandaardiseerde coëfficiënten te printen in R. Deze functies zijn niet nodig omdat de output van `standardize_parameters()` reeds opgeslagen is in een dataframe.\n\nIndien je `summary()` zou gebruiken zou je samenvattende statistieken vinden voor elke kolom in het dataframe:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(multiple_std)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  Parameter         Std_Coefficient         CI           CI_low        \n Length:4           Min.   :-0.2366   Min.   :0.95   Min.   :-0.39574  \n Class :character   1st Qu.:-0.0996   1st Qu.:0.95   1st Qu.:-0.25177  \n Mode  :character   Median : 0.2194   Median :0.95   Median : 0.06247  \n                    Mean   : 0.2005   Mean   :0.95   Mean   : 0.01497  \n                    3rd Qu.: 0.5195   3rd Qu.:0.95   3rd Qu.: 0.32921  \n                    Max.   : 0.6000   Max.   :0.95   Max.   : 0.33067  \n    CI_high        \n Min.   :-0.07750  \n 1st Qu.: 0.05256  \n Median : 0.37535  \n Mean   : 0.38612  \n 3rd Qu.: 0.70891  \n Max.   : 0.87127  \n```\n\n\n:::\n:::\n\n\n\nMet `tidy()` krijg je een foutmelding gezien `tidy()` bedoeld is voor objecten die afkomstig zijn van statistische modellen:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntidy(multiple_std)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in tidy.data.frame(multiple_std): Data frame tidiers are deprecated and\nwill be removed in an upcoming release of broom.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in mean.default(X[[i]], ...): argument is not numeric or logical:\nreturning NA\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in var(if (is.vector(x) || is.factor(x)) x else as.double(x), na.rm =\nna.rm): NAs introduced by coercion\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in mean.default(sort(x, partial = half + 0L:1L)[half + 0L:1L]):\nargument is not numeric or logical: returning NA\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in mean.default(X[[i]], ...): argument is not numeric or logical:\nreturning NA\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in mean.default(sort(x, partial = half + 0L:1L)[half + 0L:1L]):\nargument is not numeric or logical: returning NA\n```\n\n\n:::\n\n::: {.cell-output .cell-output-error}\n\n```\nError in x - stats::median(x, na.rm = na.rm): non-numeric argument to binary operator\n```\n\n\n:::\n:::\n\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}